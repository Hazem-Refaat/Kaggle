{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":17777,"databundleVersionId":869809,"sourceType":"competition"}],"dockerImageVersionId":30558,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/hazemegy/nlp-dt-using-distilbert-base-uncased?scriptVersionId=177218265\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd ","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-12T13:12:00.353245Z","iopub.execute_input":"2024-05-12T13:12:00.353915Z","iopub.status.idle":"2024-05-12T13:12:00.358288Z","shell.execute_reply.started":"2024-05-12T13:12:00.35387Z","shell.execute_reply":"2024-05-12T13:12:00.357315Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/nlp-getting-started/train.csv')","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:12:00.360196Z","iopub.execute_input":"2024-05-12T13:12:00.360958Z","iopub.status.idle":"2024-05-12T13:12:00.391705Z","shell.execute_reply.started":"2024-05-12T13:12:00.360931Z","shell.execute_reply":"2024-05-12T13:12:00.390861Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(df)","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:12:00.393023Z","iopub.execute_input":"2024-05-12T13:12:00.393563Z","iopub.status.idle":"2024-05-12T13:12:00.4015Z","shell.execute_reply.started":"2024-05-12T13:12:00.393537Z","shell.execute_reply":"2024-05-12T13:12:00.400563Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Replace empty values in the entire DataFrame with \"None\"\ndf.fillna('None', inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:12:00.403797Z","iopub.execute_input":"2024-05-12T13:12:00.404133Z","iopub.status.idle":"2024-05-12T13:12:00.413544Z","shell.execute_reply.started":"2024-05-12T13:12:00.404109Z","shell.execute_reply":"2024-05-12T13:12:00.412817Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:12:00.414546Z","iopub.execute_input":"2024-05-12T13:12:00.414821Z","iopub.status.idle":"2024-05-12T13:12:00.430762Z","shell.execute_reply.started":"2024-05-12T13:12:00.414796Z","shell.execute_reply":"2024-05-12T13:12:00.429893Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['all'] = '\"' + df['keyword'] + '\"' +  '\"' + df['location']+ '\"' + '\"' +  df['text'] + '\"'","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:12:00.431764Z","iopub.execute_input":"2024-05-12T13:12:00.432023Z","iopub.status.idle":"2024-05-12T13:12:00.452257Z","shell.execute_reply.started":"2024-05-12T13:12:00.431997Z","shell.execute_reply":"2024-05-12T13:12:00.45157Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.drop(['id','keyword','location','text'], axis = 1, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:12:00.45332Z","iopub.execute_input":"2024-05-12T13:12:00.45361Z","iopub.status.idle":"2024-05-12T13:12:00.463266Z","shell.execute_reply.started":"2024-05-12T13:12:00.453588Z","shell.execute_reply":"2024-05-12T13:12:00.462366Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:12:00.464209Z","iopub.execute_input":"2024-05-12T13:12:00.464491Z","iopub.status.idle":"2024-05-12T13:12:00.479896Z","shell.execute_reply.started":"2024-05-12T13:12:00.464467Z","shell.execute_reply":"2024-05-12T13:12:00.478992Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from transformers import DistilBertTokenizer\n# Tokenize text data\ntokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:12:00.483115Z","iopub.execute_input":"2024-05-12T13:12:00.483513Z","iopub.status.idle":"2024-05-12T13:12:00.604712Z","shell.execute_reply.started":"2024-05-12T13:12:00.483488Z","shell.execute_reply":"2024-05-12T13:12:00.603983Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"encoded = tokenizer(list(df['all']), truncation=True, padding=True, return_tensors='pt')","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:12:00.605712Z","iopub.execute_input":"2024-05-12T13:12:00.605989Z","iopub.status.idle":"2024-05-12T13:12:08.346277Z","shell.execute_reply.started":"2024-05-12T13:12:00.605965Z","shell.execute_reply":"2024-05-12T13:12:08.345465Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from torch.utils.data import Dataset\n\nclass CustomDataset(Dataset):\n    def __init__(self, input_ids, attention_mask, labels):\n        self.input_ids = input_ids\n        self.attention_mask = attention_mask\n        self.labels = labels\n\n    def __len__(self):\n        return len(self.labels)\n\n    def __getitem__(self, idx):\n        return {\n            'input_ids': self.input_ids[idx],\n            'attention_mask': self.attention_mask[idx],\n            'labels': self.labels[idx]\n        }\n\n# Create an instance of your custom dataset\ntrain_dataset = CustomDataset(encoded['input_ids'], encoded['attention_mask'], list(df['target']))\n\n","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:12:08.347394Z","iopub.execute_input":"2024-05-12T13:12:08.347694Z","iopub.status.idle":"2024-05-12T13:12:08.355577Z","shell.execute_reply.started":"2024-05-12T13:12:08.347668Z","shell.execute_reply":"2024-05-12T13:12:08.354651Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from transformers import DistilBertForSequenceClassification\n\nmodel = DistilBertForSequenceClassification.from_pretrained('distilbert-base-uncased', num_labels=2)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:12:08.35676Z","iopub.execute_input":"2024-05-12T13:12:08.35705Z","iopub.status.idle":"2024-05-12T13:12:09.182923Z","shell.execute_reply.started":"2024-05-12T13:12:08.357026Z","shell.execute_reply":"2024-05-12T13:12:09.182025Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from transformers import AdamW, Trainer, TrainingArguments\n# Fine-tuning\ntraining_args = TrainingArguments(\n    per_device_train_batch_size=32,\n    output_dir='./results',  # Directory where model checkpoints and logs will be saved\n    num_train_epochs=15,  # Number of training epochs\n    learning_rate=1e-5,\n    report_to=[],  # Disable Weights & Biases\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:12:09.18596Z","iopub.execute_input":"2024-05-12T13:12:09.186218Z","iopub.status.idle":"2024-05-12T13:12:09.191491Z","shell.execute_reply.started":"2024-05-12T13:12:09.186195Z","shell.execute_reply":"2024-05-12T13:12:09.19055Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"trainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=train_dataset,\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:12:09.192548Z","iopub.execute_input":"2024-05-12T13:12:09.192796Z","iopub.status.idle":"2024-05-12T13:12:09.282853Z","shell.execute_reply.started":"2024-05-12T13:12:09.192774Z","shell.execute_reply":"2024-05-12T13:12:09.282109Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"trainer.train()","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-12T13:12:09.283884Z","iopub.execute_input":"2024-05-12T13:12:09.284141Z","iopub.status.idle":"2024-05-12T13:21:50.151704Z","shell.execute_reply.started":"2024-05-12T13:12:09.284118Z","shell.execute_reply":"2024-05-12T13:21:50.150785Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"trainer.save_model()\n\ntokenizer.save_pretrained('Tokenizer')\n","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:21:50.153011Z","iopub.execute_input":"2024-05-12T13:21:50.153384Z","iopub.status.idle":"2024-05-12T13:21:50.574365Z","shell.execute_reply.started":"2024-05-12T13:21:50.15335Z","shell.execute_reply":"2024-05-12T13:21:50.573447Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from transformers import AutoTokenizer\n# Load the saved model\nmodel = DistilBertForSequenceClassification.from_pretrained(\"/kaggle/working/results\")\n\ntokenizer = AutoTokenizer.from_pretrained('/kaggle/working/Tokenizer')\n","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:21:50.575682Z","iopub.execute_input":"2024-05-12T13:21:50.57605Z","iopub.status.idle":"2024-05-12T13:21:51.401988Z","shell.execute_reply.started":"2024-05-12T13:21:50.576017Z","shell.execute_reply":"2024-05-12T13:21:51.400966Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test = pd.read_csv('/kaggle/input/nlp-getting-started/test.csv')\ntest","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:21:51.40316Z","iopub.execute_input":"2024-05-12T13:21:51.403469Z","iopub.status.idle":"2024-05-12T13:21:51.435068Z","shell.execute_reply.started":"2024-05-12T13:21:51.40344Z","shell.execute_reply":"2024-05-12T13:21:51.43412Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test.fillna('None', inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:21:51.436245Z","iopub.execute_input":"2024-05-12T13:21:51.436899Z","iopub.status.idle":"2024-05-12T13:21:51.442869Z","shell.execute_reply.started":"2024-05-12T13:21:51.436861Z","shell.execute_reply":"2024-05-12T13:21:51.441971Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test['all'] = '\"' + test['keyword'] + '\"' +  '\"' + test['location']+ '\"' + '\"' +  test['text'] + '\"'","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:21:51.443954Z","iopub.execute_input":"2024-05-12T13:21:51.44447Z","iopub.status.idle":"2024-05-12T13:21:51.457039Z","shell.execute_reply.started":"2024-05-12T13:21:51.444444Z","shell.execute_reply":"2024-05-12T13:21:51.456137Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test.drop(['keyword','location','text'], axis = 1, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:21:51.457974Z","iopub.execute_input":"2024-05-12T13:21:51.458203Z","iopub.status.idle":"2024-05-12T13:21:51.466902Z","shell.execute_reply.started":"2024-05-12T13:21:51.458181Z","shell.execute_reply":"2024-05-12T13:21:51.466226Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:21:51.467914Z","iopub.execute_input":"2024-05-12T13:21:51.468162Z","iopub.status.idle":"2024-05-12T13:21:51.483373Z","shell.execute_reply.started":"2024-05-12T13:21:51.468139Z","shell.execute_reply":"2024-05-12T13:21:51.482468Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import torch\ntext = test.at[3258,'all']\n# Tokenize the new text\ninputs = tokenizer(text, return_tensors=\"pt\", padding=True, truncation=True)\n# Get model predictions \nwith torch.no_grad():\n    outputs = model(**inputs)\n    logits = outputs.logits\n  \n  # Get probabilities\nprobs = torch.softmax(logits, dim=1)\n\n  # Print probabilities\nprint(\"Not probability:\", probs[0][0].item()) \nprint(\"Disaster probability:\", probs[0][1].item())\n\n# Get predicted label\npredicted_label = torch.argmax(probs, dim=1).item()\n\n  # Map labels\nprint(text)\nif predicted_label == 0:\n    print(\"Predicted Label: Not\")\nelse:\n    print(\"Predicted Label: Disaster\")","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:21:51.484631Z","iopub.execute_input":"2024-05-12T13:21:51.484957Z","iopub.status.idle":"2024-05-12T13:21:51.690147Z","shell.execute_reply.started":"2024-05-12T13:21:51.484926Z","shell.execute_reply":"2024-05-12T13:21:51.689117Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sample = pd.read_csv('/kaggle/input/nlp-getting-started/sample_submission.csv')","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:21:51.694652Z","iopub.execute_input":"2024-05-12T13:21:51.695066Z","iopub.status.idle":"2024-05-12T13:21:51.70578Z","shell.execute_reply.started":"2024-05-12T13:21:51.695038Z","shell.execute_reply":"2024-05-12T13:21:51.704908Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions = []\n\nfor text in test['all']:\n    # tokenize\n    \n    inputs = tokenizer(text, return_tensors='pt', padding=True,truncation=True)\n    \n    #get predictions\n    \n    with torch.no_grad():\n        outputs = model(**inputs)\n        logits = outputs.logits\n        \n    # Get probabilities\n    probs = torch.softmax(logits, dim=1)\n    \n    # Get predicted label\n    predicted_label =  torch.argmax(probs, dim=1 ).item()\n    \n    # Append the predicted label to the list\n    predictions.append(predicted_label)\n    \n# Add the predictions as a new column in the original DataFrame\nsample['target'] = predictions","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:21:51.706879Z","iopub.execute_input":"2024-05-12T13:21:51.707127Z","iopub.status.idle":"2024-05-12T13:24:07.551651Z","shell.execute_reply.started":"2024-05-12T13:21:51.707105Z","shell.execute_reply":"2024-05-12T13:24:07.550645Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sample","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:24:07.552919Z","iopub.execute_input":"2024-05-12T13:24:07.55322Z","iopub.status.idle":"2024-05-12T13:24:07.565634Z","shell.execute_reply.started":"2024-05-12T13:24:07.553193Z","shell.execute_reply":"2024-05-12T13:24:07.564637Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sample.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:24:07.566834Z","iopub.execute_input":"2024-05-12T13:24:07.567116Z","iopub.status.idle":"2024-05-12T13:24:07.586025Z","shell.execute_reply.started":"2024-05-12T13:24:07.567092Z","shell.execute_reply":"2024-05-12T13:24:07.585187Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/working/submission.csv')\ndf","metadata":{"execution":{"iopub.status.busy":"2024-05-12T13:24:07.587066Z","iopub.execute_input":"2024-05-12T13:24:07.587317Z","iopub.status.idle":"2024-05-12T13:24:07.598953Z","shell.execute_reply.started":"2024-05-12T13:24:07.587294Z","shell.execute_reply":"2024-05-12T13:24:07.598107Z"},"trusted":true},"execution_count":null,"outputs":[]}]}